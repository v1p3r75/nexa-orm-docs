{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started","text":""},{"location":"#introduction","title":"Introduction","text":"<p>NexaORM is a modern PHP Object-Relational Mapping (ORM) library designed to simplify database interactions and streamline the development of PHP applications. It provides a lightweight and intuitive way to manage database entities, relationships, and queries.</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Attribute Annotations (Entities): Define entity properties using expressive annotations, making it easy to map database columns to PHP properties.</p> </li> <li> <p>Models: Provide a foundation for representing and managing data objects within the application.</p> </li> <li> <p>Simplified Query Building: Construct database queries effortlessly with a simple and intuitive query builder.</p> </li> <li> <p>Relationships: Define and work with relationships between entities using straightforward annotations.</p> </li> <li> <p>Auto-Migration: NexaORM includes an auto-migration feature that simplifies the process of updating the database schema to match changes in entity definitions.</p> </li> <li> <p>Flexible Configuration: NexaORM is designed with flexibility in mind, allowing developers to adapt the library to their specific project requirements.</p> </li> </ul>"},{"location":"#why-nexaorm","title":"Why NexaORM?","text":"<p>Intelligent Auto-Generated Migrations:</p> <p>Say goodbye to tedious manual migration creation! NexaORM's intelligent auto-generation feature analyzes your entities and creates the necessary migrations to update your database schema accordingly. This powerful feature offers several benefits:</p> <ul> <li>Save Time and Effort: Eliminate the time-consuming and error-prone process of writing migrations manually.</li> <li>Reduced Errors: Ensure consistency between your entities and database schema, minimizing the risk of errors and data inconsistencies.</li> <li> <p>Efficient Development: Streamline your development workflow by automating a crucial step in database management.</p> </li> <li> <p>Effortless Database Management: NexaORM takes database management to the next level by simplifying and automating various tasks:</p> </li> <li> <p>Automatic Schema Updates: Easily update your database schema to match your evolving entities without manual intervention.</p> </li> <li>Rollback Support: Safely revert to a previous database version if necessary, providing a safety net in case of unexpected issues.</li> <li>Version Control Integration: Integrate your migrations with version control systems, enabling seamless collaboration and tracking of changes.</li> </ul> <p>Seamless Integration:</p> <p>NexaORM seamlessly integrates with your existing development environment:</p> <ul> <li>Works with Any Framework: Use NexaORM with any PHP framework, including Laravel, Symfony, and CodeIgniter.</li> <li>Flexible Configuration: Customize NexaORM's behavior to match your specific project requirements.</li> <li>Extensible Architecture: Extend NexaORM's functionality with custom plugins and modules.</li> </ul> <p>Community and Support:</p> <p>Join a vibrant community of developers and contributors who actively support NexaORM:</p> <ul> <li>Detailed Documentation: Access comprehensive documentation covering all aspects of NexaORM usage.</li> <li>Responsive Support: Get help and answers to your questions from the NexaORM community and maintainers.</li> <li>Continuous Development: Benefit from regular updates and new features driven by the active NexaORM community.</li> </ul> <p>Choose NexaORM and unlock the power of intelligent auto-generated migrations, effortless database management, seamless integration, and a supportive community. Embrace a more efficient and error-free development workflow for your PHP applications.</p>"},{"location":"#installation","title":"Installation","text":"<p>Use Composer to install the package:</p> Bash<pre><code>composer require v1p3r75/nexa-orm\n</code></pre>"},{"location":"#preview","title":"Preview","text":"UserEntity.php<pre><code>&lt;?php\n\n// Define entity\n\n#[Entity]\nclass UserEntity\n{\n\n  #[PrimaryKey]\n  #[SmallInt]\n  #[AutoIncrement(true)]\n  public int $id;\n\n  #[Strings]\n  #[DefaultValue('John')]\n  public string $username;\n\n  #[Number]\n  #[ForeignKey(ProfileEntity::class, 'id', [Nexa::ON_DELETE =&gt; Nexa::CASCADE, Nexa::ON_UPDATE =&gt; Nexa::CASCADE])]\n  #[Comment('user profile')]\n  #[Nullable]\n  public int $profile;\n\n  #[DateAndTime]\n  #[DefaultValue(Nexa::DATETIME_NOW)]\n  public DateTime $created_at;\n}\n</code></pre> User.php<pre><code>&lt;?php\n\n// Create a model for database interation\n\n\nuse Nexa\\Models\\Model;\nuse Nexa\\Test\\Entities\\UserEntity;\n\nclass User extends Model\n{\n\n  protected $entity = UserEntity::class;\n\n}\n\nUser::insert(['username' =&gt; 'John Doe', 'email' =&gt; 'johndoe@test.com'])\n</code></pre>"},{"location":"#authors","title":"Authors","text":"<ul> <li>Fortunatus KIDJE (v1p3r75) - Main Developer</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li>GitHub Repository: https://github.com/v1p3r75/NexaORM</li> </ul>"},{"location":"attributes/","title":"Attributes","text":""},{"location":"attributes/#introduction","title":"Introduction","text":"<p>NexaORM attributes play a vital role in defining the characteristics and behavior of entities and their properties. They provide metadata that enriches the framework and guides its interactions with the database.</p>"},{"location":"attributes/#types-of-attributes","title":"Types of Attributes","text":"<p>Entity Attributes:</p> <ul> <li><code>#[Entity]</code>: Designates a class as an entity that can be mapped to a database table.</li> </ul> <p>Property Attributes:</p> <ul> <li> <p>Data Types:</p> <ul> <li><code>#[Strings]</code>: Designates a property as a string type.</li> <li><code>#[Number]</code>: Designates a property as a numeric type.</li> <li><code>#[SmallInt]</code>: Designates a property as a small integer type (2 bytes).</li> <li><code>#[DateAndTime]</code>: Designates a property as a date and time type.</li> <li>...</li> </ul> </li> <li> <p>Constraints and Default Values:</p> <ul> <li><code>#[PrimaryKey]</code>: Designates the property as the primary key of the entity.</li> <li><code>#[AutoIncrement(true)]</code> (with <code>#[PrimaryKey]</code>): Enables auto-incrementing for the primary key.</li> <li><code>#[DefaultValue(...)]</code>: Sets a default value for a property.</li> <li><code>#[Nullable]</code>: Allows the property to be null.</li> <li>...</li> </ul> </li> <li> <p>Relationships:</p> <ul> <li><code>#[ForeignKey(targetEntityClass, targetProperty, onDelete = Nexa::CASCADE, onUpdate = Nexa::CASCADE)]</code>: Defines a foreign key relationship with another entity.<ul> <li><code>targetEntityClass</code>: Class of the related entity.</li> <li><code>targetProperty</code>: Property in the related entity that this property references.</li> <li><code>onDelete</code>: Action to take when a row in the linked table is deleted (default: <code>Nexa::SET_NULL</code>).</li> <li><code>onUpdate</code>: Action to take when a row in the linked table is updated (default: <code>Nexa::NO_ACTION</code>).</li> </ul> </li> </ul> </li> <li> <p>Miscellaneous:</p> <ul> <li><code>#[Comment('...')]</code>: Adds a comment to a property (visible in the database schema).</li> <li>...</li> </ul> </li> </ul>"},{"location":"attributes/#example-attributes","title":"Example Attributes","text":"PHP<pre><code>&lt;?php\n\n#[Entity]\nclass UserEntity\n{\n\n  #[PrimaryKey]\n  #[SmallInt]\n  #[AutoIncrement(true)]\n  public int $id;\n\n  #[Strings]\n  #[DefaultValue('John')]\n  public string $username;\n\n  #[Number]\n  #[ForeignKey(ProfileEntity::class, 'id', [Nexa::ON_DELETE =&gt; Nexa::CASCADE, onUpdate =&gt; Nexa::CASCADE])]\n  #[Comment('user profile')]\n  #[Nullable]\n  public int $profile;\n\n  #[DateAndTime]\n  #[DefaultValue(Nexa::DATETIME_NOW)]\n  public DateTime $created_at;\n}\n</code></pre>"},{"location":"attributes/#benefits-of-attributes","title":"Benefits of Attributes","text":"<ul> <li>Rich Metadata: Define additional information about entities and their properties.</li> <li>Clearer and More Precise Code: Enhance code readability and understanding.</li> <li>Improved Relationship Management: Facilitate creation and management of relationships between entities.</li> <li>Flexibility and Customization: Allow tailoring entity behavior to specific needs.</li> </ul> <p>In summary, NexaORM attributes are an essential element for fully leveraging the framework's power and flexibility. By using them effectively, you can design robust entities and achieve more efficient database interactions.</p>"},{"location":"collections/","title":"Collections","text":""},{"location":"collections/#introduction","title":"Introduction","text":"<p>Collections are fundamental components in NexaORM, representing a group of entities retrieved from the database. They provide a convenient way to work with multiple entities at once and offer various methods for manipulating and iterating through the data.</p>"},{"location":"collections/#the-collection-class","title":"The <code>Collection</code> Class","text":"<p>NexaORM provides a built-in <code>Collection</code> class that implements the <code>Countable</code> and <code>ArrayAccess</code> interfaces. This class offers a set of methods for working with collections of entities:</p> <ul> <li><code>__construct(array $items)</code>: Initializes the collection with an array of entities.</li> <li><code>count()</code>: Returns the number of entities in the collection.</li> <li><code>get(string $key)</code>: Retrieves the entity with the specified key (usually the entity's primary key).</li> <li><code>all(?callable $callback = null)</code>: Returns an array containing all entities in the collection. Optionally applies a callback function to each entity.</li> <li><code>__get($name)</code>: Magic method that allows accessing entities by property name (equivalent to <code>get($name)</code>).</li> <li><code>random()</code>: Selects and returns a random entity from the collection.</li> <li><code>offsetExists(mixed $offset)</code>: Checks if a specific offset exists in the collection (similar to array access).</li> <li><code>offsetGet(mixed $offset)</code>: Retrieves the entity at the specified offset.</li> <li><code>offsetSet(mixed $offset, mixed $value)</code>: Sets the entity at the specified offset.</li> <li><code>offsetUnset(mixed $offset)</code>: Removes the entity at the specified offset.</li> <li><code>first()</code>: Returns the first entity in the collection.</li> <li><code>last()</code>: Returns the last entity in the collection.</li> <li><code>filter(callable $callback)</code>: Creates a new collection containing entities that pass the provided callback function.</li> <li><code>map(callable $callback)</code>: Applies the callback function to each entity in the collection and returns a new collection with the modified entities.</li> <li><code>has(string $key)</code>: Checks if the collection contains an entity with the specified key.</li> <li><code>values()</code>: Returns an array containing the values (entities) from the collection.</li> <li><code>keys()</code>: Returns an array containing the keys (usually primary keys) from the collection.</li> <li><code>isEmpty()</code>: Checks if the collection is empty.</li> </ul>"},{"location":"collections/#benefits-of-collections","title":"Benefits of Collections","text":"<ul> <li>Efficient Data Handling: Collections provide a streamlined way to manage and manipulate multiple entities retrieved from database queries.</li> <li>Simplified Iterations: Collection methods like <code>all()</code>, <code>filter()</code>, and <code>map()</code> allow you to easily iterate through entities and perform operations on them.</li> <li>Improved Code Readability: Using collections keeps your code clean and focused on data processing rather than low-level array manipulations.</li> </ul>"},{"location":"collections/#example-usage","title":"Example Usage","text":"PHP<pre><code>&lt;?php\n\n$users = User::findAll(); // Retrieve all users as Collection\n\nif ($users-&gt;isEmpty()) {\n  // Handle empty collection\n} else {\n  foreach ($users as $user) {\n    echo $user-&gt;username . PHP_EOL;\n  }\n\n  $activeUsers = $users-&gt;filter(fn ($user) =&gt; $user-&gt;isActive); // Filter active users\n\n  $usernames = $users-&gt;map(fn ($user) =&gt; $user-&gt;username); // Extract usernames\n}\n</code></pre> <p>By understanding and effectively utilizing NexaORM collections, you can enhance the efficiency and clarity of your database interactions within your NexaORM projects.</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#introduction","title":"Introduction","text":"<p>NexaORM allows for centralized configuration of your database settings in a dedicated file, <code>database.php</code>. This approach offers several advantages:</p> <ul> <li>Improved Readability and Maintainability: Separates database configurations from your core application logic.</li> <li>Simplified Environment Management: Enables configuration of different environments (development, production, etc.) with specific files.</li> <li>Configuration Sharing: Facilitates sharing of database configuration across multiple applications using NexaORM.</li> </ul>"},{"location":"configuration/#configuration_1","title":"Configuration","text":"<p>Sample <code>database.php</code> Configuration File:</p> PHP<pre><code>&lt;?php\n\nreturn [\n\n    'host' =&gt; 'localhost',\n    'user' =&gt; 'root',\n    'password' =&gt; '',\n    'dbname' =&gt; 'nexa',\n    'driver' =&gt; 'pdo_mysql',\n\n    'options' =&gt; [\n\n        'migrations_path' =&gt; __DIR__ . \"/migrations/\",\n        'entity_path' =&gt; __DIR__ . \"/Entities/\",\n        'entity_namespace' =&gt; \"\\\\Nexa\\\\Test\\\\Entities\",\n    ]\n\n];\n</code></pre> <p>Inheritance and Automatic Configuration:</p> <p>By inheriting from the <code>Nexa\\Models\\Model</code> class and overriding the <code>setConfigPath()</code> method, you can automatically load the configuration from <code>database.php</code>. This approach simplifies your model code and centralizes configuration.</p> <p>Sample <code>Model.php</code> Model:</p> PHP<pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Nexa\\Models\\Model as BaseModel;\n\nclass Model extends BaseModel\n{\n\n    public function __construct()\n    {\n\n        $this-&gt;setConfigPath('database.php');\n        parent::__construct();\n\n    }\n\n}\n</code></pre> <p>Sample <code>User.php</code> Model:</p> PHP<pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse App\\Entities\\UserEntity;\n\nclass User extends Model\n{\n\n    protected $entity = UserEntity::class;\n\n    protected $fillable = ['username', 'created_at'];\n\n}\n</code></pre>"},{"location":"configuration/#benefits-of-inheritance","title":"Benefits of Inheritance","text":"<ul> <li>Reduced Redundant Code: Eliminates the need to repeat database configuration in each model.</li> <li>Improved Consistency: Ensures all models utilize the same configuration.</li> <li>Easier Maintenance: Allows configuration changes in a single location.</li> </ul>"},{"location":"configuration/#conclusion","title":"Conclusion","text":"<p>Leveraging a centralized configuration file and inheriting from NexaORM's <code>Model</code> class provides an efficient approach to managing database configuration within your PHP applications. This approach enhances code readability, maintainability, and consistency.</p>"},{"location":"configuration/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Define database connection parameters in <code>database.php</code>.</li> <li>Override the <code>setConfigPath()</code> method in your model class to load configuration from <code>database.php</code>.</li> <li>Inherit from <code>Nexa\\Models\\Model</code> for automatic configuration benefits.</li> </ul> <p>By following these guidelines, you can effectively configure NexaORM and harness its features for streamlined database interactions in your projects.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>We appreciate your interest in contributing to NexaORM! This page outlines the guidelines for contributing code, documentation, and other improvements to the project.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<ul> <li>Issues: Report bugs or request features by creating issues on the NexaORM GitHub repository: https://github.com/v1p3r75/NexaORM/issues. </li> <li>Pull Requests: Fork the NexaORM repository, make your changes, and submit a pull request for review. Ensure your pull request adheres to the coding style and includes clear documentation for any new features.</li> </ul> <p>Coding Standards:</p> <ul> <li>Follow PSR-2 coding standards for consistent and readable code.</li> <li>Use meaningful variable and function names.</li> <li>Add comments to explain complex logic or non-obvious code sections.</li> </ul> <p>Documentation:</p> <ul> <li>Improve existing documentation by fixing errors or adding clarity.</li> <li>Contribute new documentation for features or functionalities you introduce.</li> <li>Use clear and concise language with proper grammar.</li> </ul> <p>Contributor License Agreement:</p> <p>By submitting a contribution, you agree to the NexaORM Contributor License Agreement (CLA). The CLA can be found at [link to NexaORM CLA, if available. If not, remove this line]. </p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the NexaORM Repository: Create a fork of the NexaORM repository on GitHub.</li> <li>Clone your Fork: Clone your forked repository to your local machine.</li> <li>Create a Branch: Create a new branch for your specific contribution.</li> <li>Make Changes: Make your changes to the code or documentation.</li> <li>Commit Changes: Commit your changes with clear commit messages.</li> <li>Push Changes: Push your changes to your forked repository on GitHub.</li> <li>Create a Pull Request: Create a pull request from your branch to the main NexaORM repository.</li> </ol>"},{"location":"contributing/#additional-tips","title":"Additional Tips","text":"<ul> <li>Unit Tests: Consider adding unit tests for any new code you introduce.</li> <li>Code Reviews: Participate in code reviews for other pull requests to ensure overall code quality.</li> <li>Stay Updated: Follow the NexaORM project for updates and announcements.</li> </ul>"},{"location":"contributing/#we-welcome-your-contributions","title":"We welcome your contributions!","text":"<p>By following these guidelines, you can help us make NexaORM a better and more valuable project for everyone. If you have any questions or need assistance, feel free to reach out to the project maintainers on the NexaORM GitHub repository.</p>"},{"location":"entities/","title":"Entities","text":""},{"location":"entities/#introduction","title":"Introduction","text":"<p>Entities are the foundation of object-relational mapping (ORM) in NexaORM. They represent database tables and map their columns to properties within your PHP classes. This approach simplifies database interactions by allowing you to work with objects instead of raw SQL.</p>"},{"location":"entities/#creating-entities","title":"Creating Entities","text":"<p>Define an Entity Class:</p> <p>Create a PHP class and decorate it with the <code>#[Entity]</code> attribute to mark it as an entity.</p> <p>Properties:</p> <ol> <li>Declare properties within the class to represent database table columns.</li> <li>Use appropriate NexaORM attributes to define data types, constraints, relationships, and other aspects.</li> </ol>"},{"location":"entities/#common-nexaorm-attributes-for-entities","title":"Common NexaORM Attributes for Entities","text":"<ul> <li><code>#[PrimaryKey]</code>: Marks a property as the primary key of the table (can be used only once per entity).</li> <li><code>#[AutoIncrement(true)]</code> (with <code>#[PrimaryKey]</code>): Enables auto-incrementing for the primary key.</li> <li><code>#[Strings]</code>: Defines a string type for a property.</li> <li><code>#[Number]</code>: Defines a numeric type for a property.</li> <li><code>#[SmallInt]</code>: Specifies a small integer type (usually 2 bytes).</li> <li><code>#[DefaultValue(...)]</code>: Sets a default value for a property.</li> <li><code>#[ForeignKey(targetEntityClass, targetProperty, onDelete = Nexa::CASCADE, onUpdate = Nexa::CASCADE)]</code>: Defines a foreign key relationship to another entity.<ul> <li><code>targetEntityClass</code>: The class of the related entity.</li> <li><code>targetProperty</code>: The property in the related entity that this property references.</li> <li><code>onDelete</code>: Action to take when a row in the referenced table is deleted (defaults to <code>Nexa::SET_NULL</code>).</li> <li><code>onUpdate</code>: Action to take when a row in the referenced table is updated (defaults to <code>Nexa::NO_ACTION</code>).</li> </ul> </li> <li><code>#[Comment('...')]</code>: Adds a comment to a property (visible in database schema).</li> <li><code>#[Nullable]</code>: Allows a property to be null.</li> <li><code>#[DateAndTime]</code>: Defines a property to hold a date and time value.</li> <li><code>#[DefaultValue(Nexa::DATETIME_NOW)]</code>: Sets the default value of a <code>#[DateAndTime]</code> property to the current date and time.</li> </ul>"},{"location":"entities/#example-entity","title":"Example Entity","text":"PHP<pre><code>&lt;?php\n\nnamespace Nexa\\Test\\Entities;\n\nuse DateTime;\nuse Nexa\\Attributes\\Common\\AutoIncrement;\nuse Nexa\\Attributes\\Common\\Comment;\nuse Nexa\\Attributes\\Common\\DefaultValue;\nuse Nexa\\Attributes\\Common\\ForeignKey;\nuse Nexa\\Attributes\\Common\\Nullable;\nuse Nexa\\Attributes\\Common\\PrimaryKey;\nuse Nexa\\Attributes\\Dates\\DateAndTime;\nuse Nexa\\Attributes\\Entities\\Entity;\nuse Nexa\\Attributes\\Numbers\\Number;\nuse Nexa\\Attributes\\Numbers\\SmallInt;\nuse Nexa\\Attributes\\Strings\\Strings;\nuse Nexa\\Nexa;\n\n#[Entity]\nclass UserEntity\n{\n\n  #[PrimaryKey]\n  #[SmallInt]\n  #[AutoIncrement(true)]\n  public int $id;\n\n  #[Strings]\n  #[DefaultValue('John')]\n  public string $username;\n\n  #[Number]\n  #[ForeignKey(ProfileEntity::class, 'id', [Nexa::ON_DELETE =&gt; Nexa::CASCADE, Nexa::ON_UPDATE =&gt; Nexa::CASCADE])]\n  #[Comment('user profile')]\n  #[Nullable]\n  public int $profile;\n\n  #[DateAndTime]\n  #[DefaultValue(Nexa::DATETIME_NOW)]\n  public DateTime $created_at;\n}\n</code></pre>"},{"location":"entities/#benefits-of-using-entities","title":"Benefits of Using Entities","text":"<ul> <li>Simplified Database Interactions: Work with objects instead of raw SQL queries.</li> <li>Improved Code Readability: Code becomes more self-documenting due to descriptive properties and attributes.</li> <li>Reduced Errors: Type checking and constraints help prevent errors and maintain data integrity.</li> </ul>"},{"location":"entities/#additional-considerations","title":"Additional Considerations","text":"<ul> <li>Refer to the NexaORM documentation for a complete list of available attributes.</li> <li>Consider using data validation techniques to ensure data integrity before saving entities.</li> </ul> <p>By effectively utilizing entities in your NexaORM projects, you'll enhance database interaction clarity, maintainability, and data integrity.</p>"},{"location":"migrations/","title":"Migrations","text":"<p>NexaORM offers intelligent auto-generation of migrations based on your entities. This feature analyzes changes to your entities and creates the necessary migrations to update your database schema accordingly.</p>"},{"location":"migrations/#benefits-of-auto-generated-migrations","title":"Benefits of Auto-Generated Migrations","text":"<ul> <li>Save Time and Effort: Eliminates tedious manual creation of migrations.</li> <li>Reduced Errors: Ensures consistency between entities and database structure.</li> <li>Easier Change Tracking: Provides a history of database schema modifications.</li> </ul>"},{"location":"migrations/#example-of-generating-migrations","title":"Example of Generating Migrations","text":"PHP<pre><code>&lt;?php\n\n// Example\n\nrequire './vendor/autoload.php';\n\nuse Nexa\\Nexa;\n\n$nexa = Nexa::getInstance(__DIR__ . \"/tests/database.php\");\n\n// Generate migrations for all entities\n$nexa-&gt;makeAllMigrations();\n\n// Run all generated migrations\n$nexa-&gt;runAllMigrations();\n</code></pre>"},{"location":"migrations/#intelligent-migration-execution","title":"Intelligent Migration Execution","text":"<p>NexaORM goes beyond just generating migrations; it also executes them intelligently. It analyzes existing migrations and compares their structure to the current database schema. NexaORM only executes the migrations necessary to update the database based on detected changes.</p>"},{"location":"migrations/#benefits-of-intelligent-migration-execution","title":"Benefits of Intelligent Migration Execution","text":"<ul> <li>Optimized Execution: Avoids wasting resources on unnecessary migrations.</li> <li>Change Management: Accounts for modifications to entity structures.</li> <li>Increased Safety: Reduces the risk of errors during migration execution.</li> </ul>"},{"location":"migrations/#advanced-features","title":"Advanced Features","text":"<ul> <li>Rebuild Migrations: Rebuild existing migrations based on current entities.</li> <li>Selective Migration Execution: Option to specify which migrations to execute.</li> <li>Rollback Management: Ability to revert to a previous database version.</li> </ul>"},{"location":"migrations/#conclusion","title":"Conclusion","text":"<p>NexaORM's intelligent auto-generated migrations provide a powerful tool for simplifying database schema management. By automating migration creation and execution, NexaORM saves you time, reduces errors, and improves application reliability.</p> <p>By leveraging NexaORM's auto-migration features, you can ensure your database remains up-to-date and consistent with your entities, streamlining your application development process.</p>"},{"location":"models/","title":"Models","text":""},{"location":"models/#introduction","title":"Introduction","text":"<p>NexaORM models act as a bridge between your entities and the database. They encapsulate the logic for interacting with entities, including data retrieval, creation, modification, and deletion. Models simplify database operations and provide a layer of abstraction between your application logic and the underlying persistence layer.</p>"},{"location":"models/#model-structure","title":"Model Structure","text":"<p>A typical NexaORM model inherits from the <code>Nexa\\Models\\Model</code> class and defines the following properties to customize its behavior:</p> <p>Required Property:</p> <ul> <li><code>$entity</code>: (Required) Specifies the entity class associated with the model. This class represents the database table structure.</li> </ul> <p>Optional Properties:</p> <ul> <li><code>$hidden</code>: (Optional) An array listing entity properties that should be excluded from serialization (e.g., JSON encoding).</li> <li><code>$fillable</code>: (Optional) An array listing the entity properties that can be mass-assigned during data operations (e.g., creation, update). By default, all properties are fillable.</li> <li><code>$timestamp</code>: (Optional) A boolean value indicating whether timestamps (<code>created_at</code> and <code>updated_at</code>) should be automatically managed for the entity. Defaults to <code>true</code>.</li> <li><code>$soft_delete</code>: (Optional) A boolean value indicating whether soft delete functionality should be enabled. When enabled, deleted entities are not physically removed from the database but marked as deleted with a <code>deleted_at</code> timestamp. Defaults to <code>false</code>.</li> <li><code>$primaryKey</code>: (Optional) Specifies the name of the primary key column in the database table. Defaults to <code>\"id\"</code>.</li> <li><code>$date_format</code>: (Optional) Defines the format used for storing and retrieving date and time values in the database. Defaults to <code>\"Y-m-d H:i:s\"</code> (year-month-day hour:minute:second).</li> <li><code>$created_at</code>: (Optional) Specifies the name of the property in the entity that holds the creation timestamp. Defaults to <code>\"created_at\"</code>.</li> <li><code>$updated_at</code>: (Optional) Specifies the name of the property in the entity that holds the update timestamp. Defaults to <code>\"updated_at\"</code>.</li> <li><code>$deleted_at</code>: (Optional) Specifies the name of the property in the entity that holds the soft delete timestamp (if enabled). Defaults to <code>\"deleted_at\"</code>.</li> </ul>"},{"location":"models/#example-model","title":"Example Model","text":"PHP<pre><code>&lt;?php\n\nnamespace Nexa\\Test\\Models;\n\nuse Nexa\\Models\\Model;\nuse Nexa\\Test\\Entities\\UserEntity;\n\nclass User extends Model\n{\n\n  protected $entity = UserEntity::class;\n\n  protected $hidden = ['password']; // Exclude password from serialization\n\n  protected $fillable = ['username', 'email']; // Allow mass assignment of specific properties\n\n  protected $timestamp = false; // Disable automatic timestamps\n\n  protected $soft_delete = true; // Enable soft delete functionality\n\n  // Other properties can be set as needed\n}\n</code></pre>"},{"location":"models/#explanation","title":"Explanation","text":"<ul> <li>This model inherits from <code>Model</code> and associates itself with the <code>UserEntity</code> class.</li> <li>It excludes the <code>password</code> property from serialization for security reasons.</li> <li>It allows mass assignment only for <code>username</code> and <code>email</code> properties during creation or update.</li> <li>It disables automatic timestamp management and enables soft delete functionality.</li> </ul>"},{"location":"models/#available-methods-on-models","title":"Available Methods on Models","text":"<p>NexaORM empowers you with a comprehensive set of methods to interact with your database models, streamlining data retrieval, manipulation, and management. Here's a breakdown of the essential methods you'll frequently leverage:</p> <p>Retrieving Data:</p> <ul> <li><code>find($id)</code>: Locates a single model record based on its primary key, returning a collection or <code>false</code> if not found.</li> <li><code>findOrFail($id)</code>: Fetches a single record by its primary key, throwing a <code>NotFoundException</code> if not found.</li> <li><code>findAll(array $columns = [\"*\"])</code>: Retrieves all records for the model, optionally specifying columns for inclusion.</li> <li><code>like(string $column, string $search, $columns = ['*'])</code>: Searches for records based on a partial string match within a specified column.</li> </ul> <p>Creating Data:</p> <ul> <li><code>insert(array $data)</code>: Inserts a new model record into the database.</li> </ul> <p>Updating Data:</p> <ul> <li><code>update(array $data, array $conditions = [])</code>: Updates existing model records matching specified conditions.</li> </ul> <p>Deleting Data:</p> <ul> <li><code>delete($id)</code>: Removes a single record by its primary key, considering soft delete configuration if enabled.</li> <li><code>deleteWhere(array $conditions)</code>: Deletes records based on given conditions.</li> </ul> <p>Additional Methods:</p> <ul> <li><code>beginTransaction()</code>: Initiates a database transaction.</li> <li><code>commitTransaction()</code>: Commits changes within a transaction.</li> <li><code>transactional(Closure $function)</code>: Executes a function within a transaction.</li> <li><code>random()</code>: Fetches a random model record.</li> </ul> <p>These robust methods equip you with the tools necessary to effectively interact with your database and manage model data within your NexaORM applications.</p> <p>Automatic Foreign Key Data Fetching</p> <p>NexaORM further simplifies your data management by automatically fetching foreign key information. This powerful feature allows you to access related data without writing additional code.</p> <p>Example:</p> <p>Imagine your <code>Article</code> model has a foreign key <code>category_id</code> referencing the <code>Category</code> model. When using <code>find($id)</code> to retrieve an article, NexaORM will automatically fetch the corresponding category information and include it in the result.</p> <p>Benefits of Automatic Foreign Key Data Fetching:</p> <ul> <li>Reduced Code: Eliminates the need for manual table joins to retrieve related data.</li> <li>Improved Code Readability: Makes your code more concise and easier to understand.</li> <li>Time and Effort Savings: Streamlines the process of retrieving complex data.</li> </ul> <p>How Automatic Foreign Key Data Fetching Works:</p> <p>NexaORM analyzes the relationships defined in your models and uses that information to automatically load foreign key data. You can customize this behavior by configuring fetch options for relationships within your models.</p> <p>Conclusion:</p> <p>NexaORM's automatic foreign key data fetching is a powerful tool that simplifies and optimizes data access in your applications. By leveraging this feature, you can save time, improve code readability, and focus on your application's core business logic.</p> <p>In summary, NexaORM is committed to simplifying complex data management by automating foreign key data fetching. This powerful feature empowers you to save time, improve code readability, and focus on what matters most in your application.</p>"},{"location":"models/#benefits-of-models","title":"Benefits of Models","text":"<ul> <li>Simplified Database Interactions: Models provide methods for common database operations, reducing the need for manual SQL queries.</li> <li>Data Validation and Security: Models can enforce data validation rules and control which properties can be modified, enhancing data integrity and security.</li> <li>Improved Code Readability: Models encapsulate database logic, making code cleaner and easier to maintain.</li> </ul>"},{"location":"models/#additional-considerations","title":"Additional Considerations","text":"<ul> <li>Consider using data validation techniques within models to ensure data integrity before saving entities.</li> <li>Explore other features offered by NexaORM models, such as eager loading and relationships.</li> </ul> <p>By effectively utilizing models with various properties, you can customize database interactions, manage data visibility, enforce security, and streamline database operations in your NexaORM projects.</p>"}]}